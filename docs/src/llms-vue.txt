# Viper Vue Development Guide

Viper is a filesystem router for Laravel + Vue that provides full-stack type safety through colocation of PHP and Vue code.

## Core Development Workflow

The basic development flow: create a Vue component, add an adjacent PHP file for server logic, regenerate types, then use the generated types in your components.

1. Create Vue component in `resources/js/pages/`
2. Create adjacent PHP file with same name
3. Run `php artisan typescript:transform` after editing PHP code
4. Use generated types in Vue components

## Laravel Data DTOs

Laravel Data DTOs are PHP classes that define the shape of data passed between server and client, enabling full type safety and validation.

```php
// app/Dto/UserDto.php
use Spatie\LaravelData\Data;
use Spatie\TypeScriptTransformer\Attributes\TypeScript;

#[TypeScript]
class UserDto extends Data
{
    public function __construct(
        public int $id,
        public string $name,
        public string $email,
        public ?string $avatar = null,
    ) {}
}

// app/Dto/CreateUserDto.php
#[TypeScript]
class CreateUserDto extends Data
{
    public function __construct(
        public string $name,
        public string $email,
        public string $password,
    ) {}
}
```

**Why DTOs are needed:**
- Provide type safety between PHP and TypeScript
- Enable validation in Laravel
- Generate accurate TypeScript interfaces
- Required for `useForm` and `useFormData` type inference

## Creating New Pages

Pages are Vue components that automatically become routes based on their file path, with adjacent PHP files providing server-side logic.

### Simple Page

A basic page that fetches and displays server data using props (server-to-client data flow).

```vue
<!-- resources/js/pages/home.vue -->
<template>
  <div>
    <h1>Welcome {{ user.name }}</h1>
    <p>Server time: {{ serverTime }}</p>
  </div>
</template>

<script setup lang="ts">
import { usePage } from '@ozmos/viper-vue';

const page = usePage<ViperGen.Home>();

const { data: user } = page.useQuery('user');
const { data: serverTime } = page.useQuery('serverTime');
</script>
```

```php
<?php
// resources/js/pages/home.php
use App\Dto\UserDto;

return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function user(): UserDto
    {
        return UserDto::from(request()->user());
    }

    #[\Ozmos\Viper\Attrs\Prop]
    public function serverTime(): string
    {
        return now()->toIso8601String();
    }
};
```

### Page with Route Parameters

Route parameters like `[user]` in the filename become available both in Vue and can be injected into PHP methods for database queries.

```vue
<!-- resources/js/pages/users/[user]/edit.vue -->
<template>
  <form @submit.prevent="handleSubmit">
    <input v-model="state.name" placeholder="Name" />
    <input v-model="state.email" placeholder="Email" />
    <p v-if="errors.name" class="error">{{ errors.name }}</p>
    <p v-if="errors.email" class="error">{{ errors.email }}</p>
    <button type="submit" :disabled="isPending">Update</button>
  </form>
</template>

<script setup lang="ts">
import { usePage } from '@ozmos/viper-vue';

const page = usePage<ViperGen.UsersUserEdit>();

// Access route parameters
const { params } = page;
console.log('User ID:', params.value.user);

// Get initial user data
const { data: user } = page.useQuery('user');

// Form for updates
const { state, mutate, errors, isPending } = page.useForm('updateUser', {
    state: {
        name: user.value?.name || '',
        email: user.value?.email || '',
    },
    onSuccess(updatedUser) {
        console.log('User updated:', updatedUser);
    }
});

function handleSubmit() {
    mutate();
}
</script>
```

```php
<?php
// resources/js/pages/users/[user]/edit.php
use App\Models\User;
use App\Dto\UserDto;
use App\Dto\UpdateUserDto;

return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function user(User $user): UserDto
    {
        return UserDto::from($user);
    }

    #[\Ozmos\Viper\Attrs\Action]
    public function updateUser(User $user, UpdateUserDto $data): UserDto
    {
        $user->update($data->toArray());
        return UserDto::from($user->fresh());
    }
};
```

## Consuming Props

Props are server-side functions that provide data to your Vue components, automatically cached and available through TanStack Query.

### Basic Props

Props marked with `#[Prop]` are fetched on page load, while `lazy: true` props must be manually fetched.

```vue
<script setup lang="ts">
const page = usePage<ViperGen.Posts>();

// Always fetched on page load
const { data: posts, isLoading } = page.useQuery('posts');

// Lazy loaded (fetch manually)
const { data: comments, refetch: fetchComments } = page.useQuery('comments');
</script>
```

```php
return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    /** @return PostDto[] */
    public function posts()
    {
        return PostDto::collect(Post::published()->get());
    }

    #[\Ozmos\Viper\Attrs\Prop(lazy: true)]
    /** @return CommentDto[] */
    public function comments()
    {
        return CommentDto::collect(Comment::recent()->get());
    }
};
```

### Props with Dependencies

Props can accept route parameters and other dependencies through Laravel's service container, enabling dynamic data loading.

```vue
<script setup lang="ts">
const page = usePage<ViperGen.PostsIdParam>();

const { data: post } = page.useQuery('post');
const { data: relatedPosts } = page.useQuery('relatedPosts');
</script>
```

```php
return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function post(Post $post): PostDto
    {
        return PostDto::from($post);
    }

    #[\Ozmos\Viper\Attrs\Prop]
    /** @return PostDto[] */
    public function relatedPosts(Post $post)
    {
        return PostDto::collect(
            Post::where('category_id', $post->category_id)
                ->where('id', '!=', $post->id)
                ->limit(5)
                ->get()
        );
    }
};
```

## Calling Actions

Actions are server-side functions that handle user interactions like form submissions, providing a type-safe way to mutate data.

### Basic Mutation

Simple actions for operations like deletions, using `useMutation` for one-off server calls with loading states and error handling.

```vue
<template>
  <button @click="handleDelete" :disabled="isPending">
    {{ isPending ? 'Deleting...' : 'Delete Post' }}
  </button>
  <p v-if="error">{{ error.message }}</p>
</template>

<script setup lang="ts">
const page = usePage<ViperGen.PostsIdParam>();

const { mutate: deletePost, isPending, error } = page.useMutation('deletePost', {
    onSuccess() {
        // Redirect or show success message
        router.push('/posts');
    }
});

function handleDelete() {
    if (confirm('Are you sure?')) {
        deletePost({ confirm: true });
    }
}
</script>
```

```php
return new class {
    #[\Ozmos\Viper\Attrs\Action]
    public function deletePost(Post $post): void
    {
        $data = request()->validate(['confirm' => 'required|boolean']);
        
        if ($data['confirm']) {
            $post->delete();
        }
    }
};
```

### Form Handling with useForm

The `useForm` helper manages form state, validation errors, and submission, perfect for standard forms with multiple fields.

```vue
<template>
  <form @submit.prevent="mutate()">
    <input v-model="state.title" placeholder="Title" />
    <textarea v-model="state.content" placeholder="Content"></textarea>
    <select v-model="state.category_id">
      <option v-for="category in categories" :key="category.id" :value="category.id">
        {{ category.name }}
      </option>
    </select>
    
    <p v-if="errors.title" class="error">{{ errors.title }}</p>
    <p v-if="errors.content" class="error">{{ errors.content }}</p>
    
    <button type="submit" :disabled="isPending">
      {{ isPending ? 'Creating...' : 'Create Post' }}
    </button>
  </form>
</template>

<script setup lang="ts">
const page = usePage<ViperGen.PostsCreate>();

const { data: categories } = page.useQuery('categories');

const { state, mutate, errors, isPending } = page.useForm('createPost', {
    state: {
        title: '',
        content: '',
        category_id: null,
    },
    onSuccess(newPost) {
        router.push(`/posts/${newPost.id}`);
    }
});
</script>
```

```php
return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    /** @return CategoryDto[] */
    public function categories()
    {
        return CategoryDto::collect(Category::all());
    }

    #[\Ozmos\Viper\Attrs\Action]
    public function createPost(CreatePostDto $data): PostDto
    {
        $post = request()->user()->posts()->create($data->toArray());
        return PostDto::from($post);
    }
};
```

### File Uploads with useFormData

File uploads require `useFormData` which handles multipart form data, combining JSON state with file uploads in a single request.

```vue
<template>
  <form @submit.prevent="mutate()">
    <input v-model="state.title" placeholder="Title" />
    <input type="file" @change="handleFileChange" accept="image/*" />
    <img v-if="previewUrl" :src="previewUrl" alt="Preview" class="preview" />
    
    <p v-if="errors.title" class="error">{{ errors.title }}</p>
    <p v-if="errors.image" class="error">{{ errors.image }}</p>
    
    <button type="submit" :disabled="isPending">
      {{ isPending ? 'Uploading...' : 'Upload' }}
    </button>
  </form>
</template>

<script setup lang="ts">
const page = usePage<ViperGen.Gallery>();

const previewUrl = ref<string | null>(null);

const { state, mutate, errors, isPending } = page.useFormData('uploadImage', {
    state: {
        title: '',
        image: null,
    },
    files: ['image'],
    onSuccess(uploadedImage) {
        console.log('Uploaded:', uploadedImage);
        // Reset form
        state.title = '';
        state.image = null;
        previewUrl.value = null;
    }
});

function handleFileChange(event: Event) {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
        state.image = file;
        previewUrl.value = URL.createObjectURL(file);
    }
}
</script>
```

```php
<?php
use App\Dto\ImageDto;
use App\Dto\UploadImageDto;

return new class {
    #[\Ozmos\Viper\Attrs\Action]
    public function uploadImage(UploadImageDto $data): ImageDto
    {
        $path = $data->image->store('images', 'public');
        
        $image = Image::create([
            'title' => $data->title,
            'path' => $path,
            'user_id' => request()->user()->id,
        ]);
        
        return ImageDto::from($image);
    }
};
```

File upload DTOs require special handling with `#[FormDataValue]` for non-file fields and the `ValidatesFormData` trait.

```php
<?php
// app/Dto/UploadImageDto.php
use Spatie\LaravelData\Data;
use Illuminate\Http\UploadedFile;
use Ozmos\Viper\Traits\ValidatesFormData;

#[TypeScript]
class UploadImageDto extends Data
{
    use ValidatesFormData;

    public function __construct(
        #[\Ozmos\Viper\Attrs\FormDataValue]
        public string $title,
        public UploadedFile $image,
    ) {}
}
```

## Layouts

Layouts provide shared UI and functionality across multiple pages, with props and actions from layouts automatically available to all child routes.

```vue
<!-- resources/js/pages/_layout.vue -->
<template>
  <div class="app">
    <nav>
      <router-link to="/">Home</router-link>
      <router-link to="/posts">Posts</router-link>
      <button v-if="user" @click="logout">Logout</button>
    </nav>
    
    <main>
      <router-view />
    </main>
  </div>
</template>

<script setup lang="ts">
import { usePage } from '@ozmos/viper-vue';

const page = usePage<ViperGen.Layout>();

const { data: user } = page.useQuery('currentUser');
const { mutate: logout } = page.useMutation('logout');
</script>
```

```php
<?php
// resources/js/pages/_layout.php
return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function currentUser(): ?UserDto
    {
        return request()->user() ? UserDto::from(request()->user()) : null;
    }

    #[\Ozmos\Viper\Attrs\Action]
    public function logout(): void
    {
        auth()->logout();
    }
};
```

## Route Navigation

Navigate between pages using Vue Router with the generated `route` helper for type-safe route generation with parameters.

```vue
<script setup lang="ts">
import { useRouter } from 'vue-router';
import { route } from '@/pages/routes';

const router = useRouter();

// Navigate programmatically
function goToPost(postId: number) {
    router.push(route('posts.show', { post: postId }));
}

// Or use router-link in template
</script>

<template>
  <router-link :to="route('posts.show', { post: post.id })">
    {{ post.title }}
  </router-link>
</template>
```

## Middleware

Middleware provides route-level security and access control, applying to all subroutes, props, and actions within a page or layout.

### Applying Middleware

Middleware is applied via PHP attributes on page classes and automatically protects all associated functionality:

```php
<?php
// resources/js/pages/admin/dashboard.php
// Protects the page and all its props/actions
return new #[\Ozmos\Viper\Attrs\Middleware(['auth', 'admin'])] class {
    #[\Ozmos\Viper\Attrs\Prop]
    /** @return AdminStatsDto[] */
    public function adminStats()
    {
        return AdminStatsDto::collect(AdminStats::all());
    }

    #[\Ozmos\Viper\Attrs\Action]
    public function deleteUser(User $user): void
    {
        $user->delete(); // Protected by middleware
    }
};
```

### Layout Middleware

Middleware from layouts cascades to all child routes:

```php
<?php
// resources/js/pages/admin/_layout.php
// All admin routes inherit auth + admin middleware
return new #[\Ozmos\Viper\Attrs\Middleware(['auth', 'admin'])] class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function currentAdmin(): AdminDto
    {
        return AdminDto::from(request()->user());
    }
};
```

## Route Names

Route names provide type-safe navigation and are defined via PHP attributes, with support for hierarchical naming through layouts.

### Basic Route Names

```php
<?php
// resources/js/pages/home.php
return new #[\Ozmos\Viper\Attrs\Name('home')] class {};

// resources/js/pages/auth/login.php
return new #[\Ozmos\Viper\Attrs\Name('login')] class {};
```

### Layout Route Prefixes

Layout route names are prefixed to child routes using dot notation:

```php
<?php
// resources/js/pages/posts/_layout.php
// Notice the "." at the end for prefixing
return new #[\Ozmos\Viper\Attrs\Name('posts.')] class {};

// resources/js/pages/posts/index.php
// Final route name becomes "posts.index"
return new #[\Ozmos\Viper\Attrs\Name('index')] class {};

// resources/js/pages/posts/[post]/show.php
// Final route name becomes "posts.show"
return new #[\Ozmos\Viper\Attrs\Name('show')] class {};
```

### Using Route Names in Components

```vue
<template>
  <nav>
    <router-link :to="route('home')">Home</router-link>
    <router-link :to="route('posts.index')">Posts</router-link>
    <router-link :to="route('posts.show', { post: 123 })">Specific Post</router-link>
    <button @click="router.push(route('login'))">Login</button>
  </nav>
</template>

<script setup lang="ts">
import { useRouter } from 'vue-router';
import { route } from '@/pages/routes';

const router = useRouter();
</script>
```

## Page Titles

Page titles can be set server-side via PHP attributes and updated client-side for dynamic content.

### Server-Side Titles

```php
<?php
// resources/js/pages/posts/[post]/show.php
return new #[\Ozmos\Viper\Attrs\Title('Post Details')] class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function post(Post $post): PostDto
    {
        return PostDto::from($post);
    }
};
```

### Blade Layout Setup

Include the `@viperHead` directive in your main layout:

```blade
<!-- resources/views/app.blade.php -->
<head>
    @viperHead
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
```

### Client-Side Title Updates

```vue
<template>
  <article>
    <h1>{{ post?.title }}</h1>
    <div>{{ post?.content }}</div>
  </article>
</template>

<script setup lang="ts">
import { usePage } from '@ozmos/viper-vue';
import { watch } from 'vue';

const page = usePage<ViperGen.PostsPostShow>();
const { data: post } = page.useQuery('post');

// Update title when post data loads
watch(post, (newPost) => {
  if (newPost) {
    page.replaceTitle(`${newPost.title} - Blog`);
  }
});
</script>
```

### Title Formatting Configuration

Configure default title formatting in your app setup:

```ts
// resources/js/app.ts
import { createApp } from 'vue';
import { ViperPlugin } from '@ozmos/viper-vue';

createApp({})
  .use(ViperPlugin, { 
    formatTitle: (title) => title ? `${title} - My App` : 'My App' 
  })
  .mount('#app');
```

## Important Reminders

Critical steps that are easy to forget but essential for proper Viper development.

1. **Always run `php artisan typescript:transform` after editing PHP code**
2. **Use Laravel Data DTOs for all props and actions that need types**
3. **File uploads require `useFormData` and DTOs with `#[FormDataValue]` attributes**
4. **Route parameters are automatically injected into PHP methods when parameter names match**
5. **Props from parent layouts are available to all child routes**
6. **When returning DTO arrays, use docblock annotations like `/** @return PostDto[] */` instead of `: array` for proper type inference**