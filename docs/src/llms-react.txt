# Viper React Development Guide

Viper is a filesystem router for Laravel + React that provides full-stack type safety through colocation of PHP and React code.

## Core Development Workflow

The basic development flow: create a React component, add an adjacent PHP file for server logic, regenerate types, then use the generated types in your components.

1. Create React component in `resources/js/pages/`
2. Create adjacent PHP file with same name
3. Run `php artisan typescript:transform` after editing PHP code
4. Use generated types in React components

## Laravel Data DTOs

Laravel Data DTOs are PHP classes that define the shape of data passed between server and client, enabling full type safety and validation.

```php
// app/Dto/UserDto.php
use Spatie\LaravelData\Data;
use Spatie\TypeScriptTransformer\Attributes\TypeScript;

#[TypeScript]
class UserDto extends Data
{
    public function __construct(
        public int $id,
        public string $name,
        public string $email,
        public ?string $avatar = null,
    ) {}
}

// app/Dto/CreateUserDto.php
#[TypeScript]
class CreateUserDto extends Data
{
    public function __construct(
        public string $name,
        public string $email,
        public string $password,
    ) {}
}
```

**Why DTOs are needed:**
- Provide type safety between PHP and TypeScript
- Enable validation in Laravel
- Generate accurate TypeScript interfaces
- Required for `useForm` and `useFormData` type inference

## Creating New Pages

Pages are React components that automatically become routes based on their file path, with adjacent PHP files providing server-side logic. All React pages must export a default component.

### Simple Page

A basic page that fetches and displays server data using props (server-to-client data flow).

```tsx
// resources/js/pages/home.tsx
import { usePage } from '@ozmos/viper-react';

export default function Home() {
  const page = usePage<ViperGen.Home>();

  const { data: user } = page.useQuery('user');
  const { data: serverTime } = page.useQuery('serverTime');

  return (
    <div>
      <h1>Welcome {user?.name}</h1>
      <p>Server time: {serverTime}</p>
    </div>
  );
}
```

```php
<?php
// resources/js/pages/home.php
use App\Dto\UserDto;

return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function user(): UserDto
    {
        return UserDto::from(request()->user());
    }

    #[\Ozmos\Viper\Attrs\Prop]
    public function serverTime(): string
    {
        return now()->toIso8601String();
    }
};
```

### Page with Route Parameters

Route parameters like `[user]` in the filename become available both in React and can be injected into PHP methods for database queries.

```tsx
// resources/js/pages/users/[user]/edit.tsx
import { usePage } from '@ozmos/viper-react';
import { FormEvent } from 'react';

export default function EditUser() {
  const page = usePage<ViperGen.UsersUserEdit>();

  // Access route parameters
  const { params } = page;
  console.log('User ID:', params.user);

  // Get initial user data
  const { data: user } = page.useQuery('user');

  // Form for updates
  const { state, setState, mutate, errors, isPending } = page.useForm('updateUser', {
    state: {
      name: user?.name || '',
      email: user?.email || '',
    },
    onSuccess(updatedUser) {
      console.log('User updated:', updatedUser);
    }
  });

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    mutate();
  };

  return (
    <form onSubmit={handleSubmit}>
      <input 
        value={state.name} 
        onChange={(e) => setState({ ...state, name: e.target.value })}
        placeholder="Name" 
      />
      <input 
        value={state.email} 
        onChange={(e) => setState({ ...state, email: e.target.value })}
        placeholder="Email" 
      />
      {errors.name && <p className="error">{errors.name}</p>}
      {errors.email && <p className="error">{errors.email}</p>}
      <button type="submit" disabled={isPending}>Update</button>
    </form>
  );
}
```

```php
<?php
// resources/js/pages/users/[user]/edit.php
use App\Models\User;
use App\Dto\UserDto;
use App\Dto\UpdateUserDto;

return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function user(User $user): UserDto
    {
        return UserDto::from($user);
    }

    #[\Ozmos\Viper\Attrs\Action]
    public function updateUser(User $user, UpdateUserDto $data): UserDto
    {
        $user->update($data->toArray());
        return UserDto::from($user->fresh());
    }
};
```

## Consuming Props

Props are server-side functions that provide data to your React components, automatically cached and available through TanStack Query.

### Basic Props

Props marked with `#[Prop]` are fetched on page load, while `lazy: true` props must be manually fetched.

```tsx
import { usePage } from '@ozmos/viper-react';

export default function Posts() {
  const page = usePage<ViperGen.Posts>();

  // Always fetched on page load
  const { data: posts, isLoading } = page.useQuery('posts');

  // Lazy loaded (fetch manually)
  const { data: comments, refetch: fetchComments } = page.useQuery('comments');

  return (
    <div>
      {isLoading ? <p>Loading...</p> : posts?.map(post => <div key={post.id}>{post.title}</div>)}
      <button onClick={() => fetchComments()}>Load Comments</button>
    </div>
  );
}
```

```php
return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    /** @return PostDto[] */
    public function posts()
    {
        return PostDto::collect(Post::published()->get());
    }

    #[\Ozmos\Viper\Attrs\Prop(lazy: true)]
    /** @return CommentDto[] */
    public function comments()
    {
        return CommentDto::collect(Comment::recent()->get());
    }
};
```

### Props with Dependencies

Props can accept route parameters and other dependencies through Laravel's service container, enabling dynamic data loading.

```tsx
import { usePage } from '@ozmos/viper-react';

export default function PostDetails() {
  const page = usePage<ViperGen.PostsIdParam>();

  const { data: post } = page.useQuery('post');
  const { data: relatedPosts } = page.useQuery('relatedPosts');

  return (
    <div>
      <h1>{post?.title}</h1>
      <div>
        <h3>Related Posts</h3>
        {relatedPosts?.map(related => <div key={related.id}>{related.title}</div>)}
      </div>
    </div>
  );
}
```

```php
return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function post(Post $post): PostDto
    {
        return PostDto::from($post);
    }

    #[\Ozmos\Viper\Attrs\Prop]
    /** @return PostDto[] */
    public function relatedPosts(Post $post)
    {
        return PostDto::collect(
            Post::where('category_id', $post->category_id)
                ->where('id', '!=', $post->id)
                ->limit(5)
                ->get()
        );
    }
};
```

### Props and Actions with Bind Attribute

The `#[Bind]` attribute allows you to inject models that aren't reflected in the URL, useful for modals or dynamic content. This works for both Props and Actions.

```tsx
import { usePage } from '@ozmos/viper-react';
import { useState } from 'react';

export default function AdminUsers() {
  const page = usePage<ViperGen.AdminUsers>();
  const [selectedUserId, setSelectedUserId] = useState(1);

  const { data: user } = page.useQuery('user', {
    bind: {
      user: selectedUserId,
    },
  });

  const { mutate: updateUser } = page.useMutation('updateUser', {
    bind: {
      user: selectedUserId,
    },
  });

  return (
    <div>
      <h1>{user?.name}</h1>
      <button onClick={() => updateUser({ name: 'New Name' })}>
        Update User
      </button>
    </div>
  );
}
```

```php
use Ozmos\Viper\Attrs\Bind;

return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function user(#[Bind] User $user): UserDto
    {
        return UserDto::from($user);
    }
    
    #[\Ozmos\Viper\Attrs\Action]
    public function updateUser(#[Bind] User $user, UpdateUserDto $data): UserDto
    {
        $user->update($data->toArray());
        return UserDto::from($user->fresh());
    }
    
    // Custom column binding
    #[\Ozmos\Viper\Attrs\Prop]
    public function post(#[Bind(column: 'slug')] Post $post): PostDto
    {
        return PostDto::from($post);
    }
};
```

## Calling Actions

Actions are server-side functions that handle user interactions like form submissions, providing a type-safe way to mutate data.

### Basic Mutation

Simple actions for operations like deletions, using `useMutation` for one-off server calls with loading states and error handling.

```tsx
import { usePage } from '@ozmos/viper-react';
import { useNavigate } from 'react-router';

export default function PostDetails() {
  const page = usePage<ViperGen.PostsIdParam>();
  const navigate = useNavigate();

  const { mutate: deletePost, isPending, error } = page.useMutation('deletePost', {
    onSuccess() {
      navigate('/posts');
    }
  });

  const handleDelete = () => {
    if (confirm('Are you sure?')) {
      deletePost({ confirm: true });
    }
  };

  return (
    <div>
      <button onClick={handleDelete} disabled={isPending}>
        {isPending ? 'Deleting...' : 'Delete Post'}
      </button>
      {error && <p>{error.message}</p>}
    </div>
  );
}
```

```php
return new class {
    #[\Ozmos\Viper\Attrs\Action]
    public function deletePost(Post $post): void
    {
        $data = request()->validate(['confirm' => 'required|boolean']);
        
        if ($data['confirm']) {
            $post->delete();
        }
    }
};
```

### Form Handling with useForm

The `useForm` helper manages form state, validation errors, and submission, perfect for standard forms with multiple fields.

```tsx
import { usePage } from '@ozmos/viper-react';
import { useNavigate } from 'react-router';
import { FormEvent } from 'react';

export default function CreatePost() {
  const page = usePage<ViperGen.PostsCreate>();
  const navigate = useNavigate();

  const { data: categories } = page.useQuery('categories');

  const { state, setState, mutate, errors, isPending } = page.useForm('createPost', {
    state: {
      title: '',
      content: '',
      category_id: null,
    },
    onSuccess(newPost) {
      navigate(`/posts/${newPost.id}`);
    }
  });

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    mutate();
  };

  return (
    <form onSubmit={handleSubmit}>
      <input 
        value={state.title} 
        onChange={(e) => setState({ ...state, title: e.target.value })}
        placeholder="Title" 
      />
      <textarea 
        value={state.content}
        onChange={(e) => setState({ ...state, content: e.target.value })}
        placeholder="Content"
      />
      <select 
        value={state.category_id || ''} 
        onChange={(e) => setState({ ...state, category_id: parseInt(e.target.value) })}
      >
        <option value="">Select Category</option>
        {categories?.map(category => (
          <option key={category.id} value={category.id}>{category.name}</option>
        ))}
      </select>
      
      {errors.title && <p className="error">{errors.title}</p>}
      {errors.content && <p className="error">{errors.content}</p>}
      
      <button type="submit" disabled={isPending}>
        {isPending ? 'Creating...' : 'Create Post'}
      </button>
    </form>
  );
}
```

```php
return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    /** @return CategoryDto[] */
    public function categories()
    {
        return CategoryDto::collect(Category::all());
    }

    #[\Ozmos\Viper\Attrs\Action]
    public function createPost(CreatePostDto $data): PostDto
    {
        $post = request()->user()->posts()->create($data->toArray());
        return PostDto::from($post);
    }
};
```

### File Uploads with useFormData

File uploads require `useFormData` which handles multipart form data, combining JSON state with file uploads in a single request.

```tsx
import { usePage } from '@ozmos/viper-react';
import { FormEvent, ChangeEvent, useState } from 'react';

export default function Gallery() {
  const page = usePage<ViperGen.Gallery>();
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);

  const { state, setState, mutate, errors, isPending } = page.useFormData('uploadImage', {
    state: {
      title: '',
      image: null,
    },
    files: ['image'],
    onSuccess(uploadedImage) {
      console.log('Uploaded:', uploadedImage);
      // Reset form
      setState({ title: '', image: null });
      setPreviewUrl(null);
    }
  });

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    mutate();
  };

  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setState({ ...state, image: file });
      setPreviewUrl(URL.createObjectURL(file));
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input 
        value={state.title} 
        onChange={(e) => setState({ ...state, title: e.target.value })}
        placeholder="Title" 
      />
      <input type="file" onChange={handleFileChange} accept="image/*" />
      {previewUrl && <img src={previewUrl} alt="Preview" className="preview" />}
      
      {errors.title && <p className="error">{errors.title}</p>}
      {errors.image && <p className="error">{errors.image}</p>}
      
      <button type="submit" disabled={isPending}>
        {isPending ? 'Uploading...' : 'Upload'}
      </button>
    </form>
  );
}
```

```php
<?php
use App\Dto\ImageDto;
use App\Dto\UploadImageDto;

return new class {
    #[\Ozmos\Viper\Attrs\Action]
    public function uploadImage(UploadImageDto $data): ImageDto
    {
        $path = $data->image->store('images', 'public');
        
        $image = Image::create([
            'title' => $data->title,
            'path' => $path,
            'user_id' => request()->user()->id,
        ]);
        
        return ImageDto::from($image);
    }
};
```

File upload DTOs require special handling with `#[FormDataValue]` for non-file fields and the `ValidatesFormData` trait.

```php
<?php
// app/Dto/UploadImageDto.php
use Spatie\LaravelData\Data;
use Illuminate\Http\UploadedFile;
use Ozmos\Viper\Traits\ValidatesFormData;

#[TypeScript]
class UploadImageDto extends Data
{
    use ValidatesFormData;

    public function __construct(
        #[\Ozmos\Viper\Attrs\FormDataValue]
        public string $title,
        public UploadedFile $image,
    ) {}
}
```

## Layouts

Layouts provide shared UI and functionality across multiple pages, with props and actions from layouts automatically available to all child routes. React layouts must render an `<Outlet />`.

```tsx
// resources/js/pages/_layout.tsx
import { usePage } from '@ozmos/viper-react';
import { Outlet, Link } from 'react-router';

export default function Layout() {
  const page = usePage<ViperGen.Layout>();

  const { data: user } = page.useQuery('currentUser');
  const { mutate: logout } = page.useMutation('logout');

  return (
    <div className="app">
      <nav>
        <Link to="/">Home</Link>
        <Link to="/posts">Posts</Link>
        {user && <button onClick={() => logout()}>Logout</button>}
      </nav>
      
      <main>
        <Outlet />
      </main>
    </div>
  );
}
```

```php
<?php
// resources/js/pages/_layout.php
return new class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function currentUser(): ?UserDto
    {
        return request()->user() ? UserDto::from(request()->user()) : null;
    }

    #[\Ozmos\Viper\Attrs\Action]
    public function logout(): void
    {
        auth()->logout();
    }
};
```

## Route Navigation

Navigate between pages using React Router with the generated `route` helper for type-safe route generation with parameters.

```tsx
import { useNavigate, Link } from 'react-router';
import { route } from '@/pages/routes';

export default function PostList() {
  const navigate = useNavigate();

  // Navigate programmatically
  const goToPost = (postId: number) => {
    navigate(route('posts.show', { post: postId }));
  };

  return (
    <div>
      <button onClick={() => goToPost(123)}>Go to Post 123</button>
      
      {/* Or use Link component */}
      <Link to={route('posts.show', { post: 456 })}>Post 456</Link>
    </div>
  );
}
```

## Middleware

Middleware provides route-level security and access control, applying to all subroutes, props, and actions within a page or layout.

### Applying Middleware

Middleware is applied via PHP attributes on page classes and automatically protects all associated functionality:

```php
<?php
// resources/js/pages/admin/dashboard.php
// Protects the page and all its props/actions
return new #[\Ozmos\Viper\Attrs\Middleware(['auth', 'admin'])] class {
    #[\Ozmos\Viper\Attrs\Prop]
    /** @return AdminStatsDto[] */
    public function adminStats()
    {
        return AdminStatsDto::collect(AdminStats::all());
    }

    #[\Ozmos\Viper\Attrs\Action]
    public function deleteUser(User $user): void
    {
        $user->delete(); // Protected by middleware
    }
};
```

### Layout Middleware

Middleware from layouts cascades to all child routes:

```php
<?php
// resources/js/pages/admin/_layout.php
// All admin routes inherit auth + admin middleware
return new #[\Ozmos\Viper\Attrs\Middleware(['auth', 'admin'])] class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function currentAdmin(): AdminDto
    {
        return AdminDto::from(request()->user());
    }
};
```

## Route Names

Route names provide type-safe navigation and are defined via PHP attributes, with support for hierarchical naming through layouts.

### Basic Route Names

```php
<?php
// resources/js/pages/home.php
return new #[\Ozmos\Viper\Attrs\Name('home')] class {};

// resources/js/pages/auth/login.php
return new #[\Ozmos\Viper\Attrs\Name('login')] class {};
```

### Layout Route Prefixes

Layout route names are prefixed to child routes using dot notation:

```php
<?php
// resources/js/pages/posts/_layout.php
// Notice the "." at the end for prefixing
return new #[\Ozmos\Viper\Attrs\Name('posts.')] class {};

// resources/js/pages/posts/index.php
// Final route name becomes "posts.index"
return new #[\Ozmos\Viper\Attrs\Name('index')] class {};

// resources/js/pages/posts/[post]/show.php
// Final route name becomes "posts.show"
return new #[\Ozmos\Viper\Attrs\Name('show')] class {};
```

### Using Route Names in Components

```tsx
import { useNavigate, Link } from 'react-router';
import { route } from '@/pages/routes';

export default function Navigation() {
  const navigate = useNavigate();

  return (
    <nav>
      <Link to={route('home')}>Home</Link>
      <Link to={route('posts.index')}>Posts</Link>
      <Link to={route('posts.show', { post: 123 })}>Specific Post</Link>
      <button onClick={() => navigate(route('login'))}>Login</button>
    </nav>
  );
}
```

## Page Titles

Page titles can be set server-side via PHP attributes and updated client-side for dynamic content.

### Server-Side Titles

```php
<?php
// resources/js/pages/posts/[post]/show.php
return new #[\Ozmos\Viper\Attrs\Title('Post Details')] class {
    #[\Ozmos\Viper\Attrs\Prop]
    public function post(Post $post): PostDto
    {
        return PostDto::from($post);
    }
};
```

### Blade Layout Setup

Include the `@viperHead` directive in your main layout:

```blade
<!-- resources/views/app.blade.php -->
<head>
    @viperHead
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
```

### Client-Side Title Updates

```tsx
import { usePage } from '@ozmos/viper-react';
import { useEffect } from 'react';

export default function PostShow() {
  const page = usePage<ViperGen.PostsPostShow>();
  const { data: post } = page.useQuery('post');

  // Update title when post data loads
  useEffect(() => {
    if (post) {
      page.setPageTitle(`${post.title} - Blog`);
    }
  }, [post, page]);

  return (
    <article>
      <h1>{post?.title}</h1>
      <div>{post?.content}</div>
    </article>
  );
}
```

### Title Formatting Configuration

Configure default title formatting in your app setup:

```tsx
// resources/js/app.tsx
import React from 'react';
import { createRoot } from 'react-dom/client';
import { ViperProvider } from '@ozmos/viper-react';

const root = createRoot(document.getElementById('app')!);

root.render(
  <ViperProvider formatTitle={(title) => title ? `${title} - My App` : 'My App'}>
    {/* Your app content */}
  </ViperProvider>
);
```

## Important Reminders

Critical steps that are easy to forget but essential for proper Viper development.

1. **Always run `php artisan typescript:transform` after editing PHP code**
2. **Use Laravel Data DTOs for all props and actions that need types**
3. **File uploads require `useFormData` and DTOs with `#[FormDataValue]` attributes**
4. **Route parameters are automatically injected into PHP methods when parameter names match**
5. **Props from parent layouts are available to all child routes**
6. **All React pages must export a default component**
7. **Layouts must render `<Outlet />` for child routes**
8. **When returning DTO arrays, use docblock annotations like `/** @return PostDto[] */` instead of `: array` for proper type inference**